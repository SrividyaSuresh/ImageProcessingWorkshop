# -*- coding: utf-8 -*-
"""Introduction to Image Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uojOFZxMNozlFTlrX2CMguTtlR2jPloO

Big Data Analytics Workshop

Srividya N Suresh
# Introduction to Image Processing

## OpenCV
"""

# Import libraries
import cv2 as cv
from google.colab.patches import cv2_imshow
import numpy as np
import matplotlib.pyplot as plt
import os

img = cv.imread('totoro.jpg') #/content/totoro.jpg

cv2_imshow(img)

print('image shape', img.shape)
print('image size', img.size)

# BGR
img[100,100] 
img[:,:,2]

# Resizing
img_resize = cv.resize(img, (int(img.shape[1]*0.5), int(img.shape[0]*0.5)))
print(img_resize.shape)
cv2_imshow(img_resize)

# crop
img_crop = img_resize[:250,150:400]
cv2_imshow(img_crop)

# Edit the image
img_resize[0:50, 0:50] = 0,0,255
cv2_imshow(img_resize)

cv.line(img_resize, (0,0), (300,200), (255,255,255))
cv2_imshow(img_resize)

cv.rectangle(img_resize, (50,50), (100,100), (100,100,100), thickness=4)
cv2_imshow(img_resize)

cv.rectangle(img_resize, (320,110), (360,140), (0,0,0), thickness=-1)
cv2_imshow(img_resize)

# Text
cv.putText(img_resize, 'Totoro', (120,50), fontFace=cv.FONT_HERSHEY_COMPLEX , fontScale=1, color=(0,255,0))
cv2_imshow(img_resize)

"""## Functions"""

img_cat = cv.imread('coolcat.jpg', 1)
cv2_imshow(img_cat)

img_grey_cat = cv.imread('coolcat.jpg', 0)
cv2_imshow(img_grey_cat)

# Greyscale - intensity distribution rather than color
img_grey = cv.cvtColor(img_cat, cv.COLOR_BGR2GRAY)
cv2_imshow(img_grey)

img_grey.shape

# Blur - remove noise
img_blur = cv.GaussianBlur(img_grey, (11,11), cv.BORDER_DEFAULT)
cv2_imshow(img_blur)

# Edge Cascade
# Canny Edge Detector - multistep involving gradient computation
img_canny = cv.Canny(img_blur, 100, 100)
cv2_imshow(img_canny)

# Dilate using specific structuring element - canny edges
img_dilate = cv.dilate(img_canny, (7,7), iterations=1)
cv2_imshow(img_dilate)

# Eroding
img_erode = cv.erode(img_dilate, (7,7), iterations=1)
cv2_imshow(img_erode)

# Resize
img_shrink = cv.resize(img_grey, (192,120), interpolation=cv.INTER_AREA)
cv2_imshow(img_shrink)

# Resize
img_expand = cv.resize(img_shrink, (1920,1200), interpolation=cv.INTER_CUBIC)
cv2_imshow(img_expand)

img_expand.shape

# Flip
img_flip = cv.flip(img_grey, 0)
cv2_imshow(img_flip)

"""## Contours and Edges"""

# Threshold method, binarise
thresholds, thresh = cv.threshold(img_blur, 125, 255, cv.THRESH_BINARY)
cv2_imshow(thresh)

contours, heirarchies = cv.findContours(thresh, cv.RETR_LIST, cv.CHAIN_APPROX_SIMPLE)
len(contours)

# Adaptive Threshold
img_ad_thresh = cv.adaptiveThreshold(img_blur, 255, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY, 11, 3)
cv2_imshow(img_ad_thresh)

# Canny Edge
img_canny = cv.Canny(img_grey, 100, 100)
cv2_imshow(img_canny)

# Canny edge contours
contours, heirarchies = cv.findContours(img_canny, cv.RETR_LIST, cv.CHAIN_APPROX_SIMPLE)
len(contours)

# Laplacian
img_lap = cv.Laplacian(img_grey, cv.CV_64F)
cv2_imshow(img_lap)

"""## Colourspaces"""

img = cv.imread('nebula.jpg')
cv2_imshow(img)

img.shape

img_grey = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
cv2_imshow(img_grey)

img_hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)
cv2_imshow(img_hsv)

img_lab = cv.cvtColor(img, cv.COLOR_BGR2LAB)
cv2_imshow(img_lab)

img_rgb = cv.cvtColor(img_hsv, cv.COLOR_HSV2BGR)
cv2_imshow(img_rgb)

plt.imshow(img)

img_rgb = cv.cvtColor(img, cv.COLOR_BGR2RGB)
cv2_imshow(img_rgb)

plt.imshow(img_rgb)

img = cv.imread('totoro.jpg')

img_b,img_g,img_r = cv.split(img)
cv2_imshow(img_b)

cv2_imshow(img_g)

print(img.shape)
print(img_b.shape)
print(img_g.shape)
print(img_r.shape)

img_merged = cv.merge([img_b,img_g,img_r])
cv2_imshow(img_merged)

blank = np.zeros(img_b.shape, dtype='uint8')
img_merged_blue = cv.merge([img_b, blank, blank])
cv2_imshow(img_merged_blue)

"""## Blurring"""

# Average
img_av = cv.blur(img, (5,5))
cv2_imshow(img_av)

# Gaussian
img_gaus = cv.GaussianBlur(img, (5,5), 0)
cv2_imshow(img_gaus)

# Median
img_med = cv.medianBlur(img, 3)
cv2_imshow(img_med)

# Bilateral - retains edges
img_bi = cv.bilateralFilter(img, 30, 50, 25)
cv2_imshow(img_bi)

"""## Histograms

Distribution of pixels
"""

img = cv.imread('totoro.jpg')
img_grey = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

# Grey histogram
hist_grey = cv.calcHist([img_grey], [0], None, [256], [0,256])
plt.plot(hist_grey)

# BGR Histogram
colors = ('b', 'g', 'r')
for i, col in enumerate(colors):
  hist = cv.calcHist([img], [i], None, [256], [0,256])
  plt.plot(hist, color=col)
plt.show()

"""## Face Detection with Haar Cascades"""

img = cv.imread('mom2.jpg')
cv2_imshow(img)

img.shape

img_grey = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

# Load Haar Cascades
haar_cascade = cv.CascadeClassifier('haar_cascades.xml')

faces = haar_cascade.detectMultiScale(img_grey, scaleFactor=1.1, minNeighbors=1)

len(faces), faces

for x,y,w,h in faces:
  cv.rectangle(img, (x,y), (x+w, y+h), (0,255,0))
cv2_imshow(img)

"""## Facial Recognition"""

# Load Data
people = ['Strange', 'Wanda']
features = []
labels = []
for p in people:
  folder = "/content/"+p
  l = people.index(p)
  for i in os.listdir(folder):
    if i.endswith(".jpg"):
      img = cv.imread(os.path.join(folder,i))
      img = cv.resize(img, (300,300), interpolation=cv.INTER_AREA)
      img_grey = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
      faces = haar_cascade.detectMultiScale(img_grey, scaleFactor=1.1, minNeighbors=3)
      for x,y,w,h in faces:
        img_faces = img_grey[y:y+h, x:x+w]
        # cv2_imshow(cv.resize(img_faces, (int(img_faces.shape[1]*0.2), int(img_faces.shape[0]*0.2))))
        features.append(img_faces)
        labels.append(l)
print(len(features), len(labels))

features = np.array(features, dtype='object')
labels = np.array(labels)

face_recogniser = cv.face.LBPHFaceRecognizer_create()

face_recogniser.train(features, labels)

img_test1 = cv.imread('ben3.jpg')
img_test1 = cv.resize(img_test1, (300,300))
img_test1_grey = cv.cvtColor(img_test1, cv.COLOR_BGR2GRAY)
cv2_imshow(img_test1_grey)

face_test1 = haar_cascade.detectMultiScale(img_test1_grey, 1.1, 4)
for x,y,w,h in faces:
  face_rec_test1 = img_test1_grey[y:y+h, x:x+w]
  cv2_imshow(face_rec_test1)
  label, confidence = face_recogniser.predict(face_rec_test1)
  print(label, people[label], confidence)
  cv.putText(img_test1, people[label], (50,50), cv.FONT_HERSHEY_PLAIN, 1.0, (0,255,0), 2)
  cv.rectangle(img_test1, (x,y), (x+w, y+h), (0,255,0), 2)
  cv2_imshow(img_test1)